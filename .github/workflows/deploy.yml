name: Deploy to AWS using OIDC

on:
  pull_request:
    branches:
      - staging
    types:
      - closed # Trigger when the PR is closed (merged)
permissions:
  id-token: write # required for aws auth OICD

jobs:
  deploy: # Only run if the PR was merged
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    outputs: # Set job outputs to values from filter step
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - name: Filter code changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**'

  frontend: # JOB to build and test frontend code
    needs: deploy
    #if: ${{ needs.changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read # access to check out code and install dependencies
    steps:
      - name: Get latest code
        uses: actions/checkout@v4

      - name: Node Js setup
        uses: actions/setup-node@v4
        with:
          node-version: ${{ secrets.APP_NODE_VERSION }}
          #cache: "npm"
      - name: List dir
        run: ls
        working-directory: ./frontend

      - name: Dependecy Installation
        run: npm run install
        working-directory: ./frontend

      - name: App Build
        run: npm run build
        working-directory: ./frontend

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_OIDC_ID }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ secrets.AWS_REGION }}

        # - name: Execute commands via SSM #, "runuser -l ubuntu git pull origin staging", "sudo systemctl restart gunicorn.service && echo Gunicorn restarted successfully || echo Gunicorn failed to restart"
        #   id: execute_command
        #   run: |
        #     COMMAND_ID=$(aws ssm send-command \
        #       --instance-ids ${{ secrets.AWS_EC2_INSTANCE_ID }} \
        #       --document-name "AWS-RunShellScript" \
        #       --parameters 'commands=["whoami"]' \
        #       --comment "Deploying To Staging" \
        #       --query "Command.CommandId" \
        #       --output text)

        #     echo "Command ID: $COMMAND_ID"
        #     echo "::set-output name=command_id::$COMMAND_ID"

        # - name: Output execution via SSM
        # id: output_execution
        # run: |
        #   COMMAND_ID=${{ steps.execute_command.outputs.command_id }}
        #   aws ssm list-command-invocations \
        #     --details \
        #     --instance-id ${{ secrets.AWS_EC2_INSTANCE_ID }} \
        #     --query "CommandInvocations[].CommandPlugins[].{Status:Status,Output:Output}" \
        #     --command-id "$COMMAND_ID" \
        #     --output text

      - name: Deploy to S3
        run: aws s3 sync ./dist s3://${{ secrets.AWS_S3_BUCKET_NAME }} --delete
        working-directory: frontend
